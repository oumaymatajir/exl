import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler, PowerTransformer
import matplotlib.pyplot as plt

# Charger le mod√®le entra√Æn√©
model_filename = "Experimental_data\modele_gradient_boosting_lasso.pkl"
models = joblib.load(model_filename)

# Initialiser les transformateurs
scaler = StandardScaler()
power_transformer = PowerTransformer()

# Interface utilisateur Streamlit
st.title("Pr√©diction des compositions de polym√®res recycl√©s")
st.write("Entrez les valeurs des caract√©ristiques pour obtenir les pr√©dictions des proportions de PP, Fibre de verre, Peroxyde et Autres charges.")

# Entr√©es utilisateur
melt = st.number_input("Melt (g/10min)", min_value=0.0, format="%.2f")
izod = st.number_input("Izod (ft-lb/in)", min_value=0.0, format="%.2f")
traction = st.number_input("Traction (N)", min_value=0.0, format="%.2f")
flexion = st.number_input("Flexion (psi)", min_value=0.0, format="%.2f")

# Bouton de pr√©diction
if st.button("Pr√©dire"):
    # Pr√©paration des donn√©es d'entr√©e
    input_data = np.array([[melt, izod, traction, flexion]])
    input_scaled = scaler.fit_transform(input_data)
    input_transformed = power_transformer.fit_transform(input_scaled)
    
    # Pr√©dictions
    predictions = {}
    for col in models.keys():
        predictions[col] = models[col].predict(input_transformed)[0]
    
    # Affichage des r√©sultats
    st.subheader("R√©sultats de la pr√©diction :")
    results_df = pd.DataFrame(predictions, index=["Valeur pr√©dite (%)"])
    st.dataframe(results_df.style.format("{:.4f}"))
    
    # Affichage en graphique √† barres
    st.subheader("Visualisation des r√©sultats")
    fig, ax = plt.subplots()
    ax.bar(predictions.keys(), predictions.values(), color=['blue', 'green', 'red', 'purple'])
    ax.set_ylabel("Pourcentage estim√© (%)")
    ax.set_title("Distribution des proportions pr√©dictes")
    st.pyplot(fig)
    
    # Option d'exportation des r√©sultats
    csv = results_df.to_csv(index=False).encode('utf-8')
    st.download_button(label="üì• T√©l√©charger les r√©sultats en CSV", data=csv, file_name="predictions.csv", mime="text/csv")

# Lancer Streamlit via la ligne de commande :
# streamlit run app.py
